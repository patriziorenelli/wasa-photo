tags:
  - name: "doLogin"
    description: "Logs in the user"
  - name: "setMyUserName"
    description: "Set Username of User selected by his id "
  - name: "followUser"
    description: "Follow another user"  
 
openapi: 3.0.0

info: 
  title: WasaPhoto
  description:  | 
    This API allows you to manage the
    data available in the project
  version: 0.0.1
servers:
  - url: "http://localhost:3000"
  
paths: 
  /session:
    post:
      tags: ["doLogin"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              description: "Oggetto"
              properties:
                name:
                  type: string
                  example: Mariangela
                  description: Username
                  pattern: '^[a-zA-Z0-9-_]+$'
                  minLength: 6
                  maxLength: 16
        required: true
                  
      responses: 
        '200':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                description: "User log-in action successful"
                properties:
                  identifier:
                    # change here if you decide to use an integer
                    # or any other type of identifier
                    type: string
                    example: "abcdef012345"
                    pattern: '^[a-zA-Z0-9]+$'
                    description: Id dell'utente

        '201':
          description: User CREATED and log-in action successful
          content:
            application/json:
              schema:
                type: object
                description: "User CREATED and log-in action successful"
                properties:
                  identifier:
                    # change here if you decide to use an integer
                    # or any other type of identifier
                    type: string
                    example: "abcdef012345"
                    pattern: '^[a-zA-Z0-9]+$'
                    description: Id dell'utente
  
  /users/setMyUserName:
    post:
          tags: ["setMyUserName"]
          summary: Set Username of User selected by his id 
          description: |
            If the user does not exist, error is returned.
            If the user exists, his username is changed.
          operationId: setMyUserName
          security:
            - userAuth: []
          requestBody: 
            required: true
            description: "Json con id UserId e il nuovo username da impostare"
            content: 
              application/json:
                schema: 
                  type: object
                  description: "Json lettura dati modifica"
                  properties: 
                    UserId: 
                      type: string
                      description: "User Id"
                      example: abcdef012345
                      pattern: '^[a-zA-Z0-9]+$'
                      minLength: 6
                      maxLength: 16
                    newUsername:
                      type: string
                      description: "New UserName"
                      example: Franchino_12
                      pattern: '^[a-zA-Z0-9-_]+$'
                      minLength: 6
                      maxLength: 16                
          
          responses: 
            '200':
              description: Success 
              content: 
                application/json:
                  schema:
                    type: array
                    description: "Return if UserName is changed"
                    items:
                      properties: 
                        Error Code: 
                          type: integer
                          example: 200
                          description: Error Code
                        Error Message:
                          type: string
                          example: UserName changed
                          description: Error Message
                    minItems: 1
                    maxItems: 1
            '400':
              description: Userid not found  
              content: 
                application/json:
                  schema:
                    type: array
                    description: "Return if UserName is Not changed"
                    items:
                      properties: 
                        Error Code: 
                          type: integer
                          example: 400
                          description: Error Code
                        Error Message:
                          type: string
                          example: UserName NOT changed
                          description: Error Message

                    minItems: 1
                    maxItems: 1




  /users/followUser/:
    post:
          tags: ["followUser"]
          summary: Follow another user
          description: |
            If the user identified by userId2 does not exist, error is returned.
            If the user identified by userId2 exists, user identified by userId follow user identified by userId2 if user2 hasn't banned him.
          operationId: followUser
          security:
            - userAuth: []
          requestBody: 
            required: true
            description: "Json con id UserId e il nuovo username da impostare"
            content: 
              application/json:
                schema: 
                  type: object
                  description: "Json lettura dati utenti"
                  properties: 
                    userId1:
                      type: string
                      description: "First UserId"
                      example: abcdef012345
                      pattern: '^[a-zA-Z0-9]+$'
                      minLength: 6
                      maxLength: 16   
                    UserId2:
                      type: string
                      description: "Second UserId"
                      example: abccrf389345                
                      pattern: '^[a-zA-Z0-9]+$'
                      minLength: 6
                      maxLength: 16    
          responses: 
            '200':
              description: Success 
              content: 
                application/json:
                  schema:
                    type: array
                    description: "Return if the following is successful"
                    items:
                      properties: 
                        Error Code: 
                          type: integer
                          example: 200
                          description: Error Code
                        Error Message:
                          type: string
                          example: Now follow the user Marco.
                          description: Error Message
                    minItems: 1
                    maxItems: 1
           
            '400':
              description: Userid not found  
              content: 
                application/json:
                  schema:
                    type: array
                    description: "Return if UserId is NOT found"
                    items:
                      properties: 
                        Error Code: 
                          type: integer
                          example: 400
                          description: Error Code
                        Error Message:
                          type: string
                          example: Userid not found.
                          description: Error Message
                    minItems: 1
                    maxItems: 1                         
            '403':
              description: Userid banned  
              content: 
                application/json:
                  schema:
                    type: array
                    description: "Return if User2 banned User1"
                    items:
                      properties: 
                        Error Code: 
                          type: integer
                          example: 403
                          description: Error Code
                        Error Message:
                          type: string
                          example: Sorry, Maria banned you. You can not follow her.
                          description: Error Message
                    minItems: 1
                    maxItems: 1
            '404':
              description: Userid2 not found  
              content: 
                application/json:
                  schema:
                    type: array
                    description: "Return if UserId2 is NOT found"
                    items:
                      properties: 
                        Error Code: 
                          type: integer
                          example: 404
                          description: Error Code
                        Error Message:
                          type: string
                          example: Userid2 not found.
                          description: Error Message
                    minItems: 1
                    maxItems: 1                        
            '500':
              description: Error server execution  
              content: 
                application/json:
                  schema:
                    type: array
                    description: "Error server execution"
                    items:
                      properties: 
                        Error Code: 
                          type: integer
                          example: 500
                          description: Error Code
                        Error Message:
                          type: string
                          example: Error server execution.
                          description: Error Message
                    minItems: 1
                    maxItems: 1
                    
components: 
  securitySchemes:
    userAuth:
      type: http
      scheme: bearer


