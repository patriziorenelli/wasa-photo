tags:
  - name: "doLogin"
    description: "Logs in the user"
  - name: "setMyUserName"
    description: "Set Username of User selected by his id "
  - name: "followUser"
    description: "Follow another user"  
 
openapi: 3.0.0

info: 
  title: WasaPhoto
  description:  | 
    This API allows you to manage the
    data available in the project
  version: 0.0.1
servers:
  - url: "http://localhost:3000"
  
paths: 
  /session:
    post:
      tags: ["doLogin"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        required: true
        description: User details
        content:
          application/json:
            schema: 
              type: object
              description: "Json with username"
              properties:
                userName: {$ref: "#/components/schemas/Username"}
                  
      responses: 
        '200':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                description: "User log-in action successful"
                properties:
                  UserName: {$ref: "#/components/schemas/Username"}
                    

        '201':
          description: User CREATED and log-in action successful
          content:
            application/json:
              schema:
                type: object
                description: "User CREATED and log-in action successful"
                properties:
                  identifier: { $ref: "#/components/schemas/identifier" }
                    
  
  /users/{userId}/setMyUserName:
    put:
          tags: ["setMyUserName"]
          summary: Set Username of User selected by his id 
          description: |
            If the user does not exist, error is returned.
            If the user exists, his username is changed.
          operationId: setMyUserName
          security:
            - userAuth: []
          parameters: 
            - $ref: "#/components/parameters/userId"
          requestBody: 
            required: true
            description: "Json con il nuovo username da impostare"
            content: 
              application/json:
                schema: 
                  type: object 
                  description: "Json to read new username"
                  properties:
                    newUsername: {$ref: "#/components/schemas/Username"}

          responses: 
            '200':
              description: UserName is changed 
              content:
                application/json:
                  schema:
                    type: object
                    description: "UserName is changed"
                    properties:
                      newUserName: { $ref: "#/components/schemas/Username" }
            '400':
              description: Userid not found  
              content:
                application/json:
                  schema:
                    type: object
                    description: "UserId is NOT found"
                    properties:
                      newUserName: { $ref: "#/components/schemas/identifier" }




  /users/{userId}/followUser/{followId}:
    post:
          tags: ["followUser"]
          summary: Follow another user
          description: |
            If the user identified by userId2 does not exist, error is returned.
            If the user identified by userId2 exists, user identified by userId follow user identified by userId2 if user2 hasn't banned him.
          operationId: followUser
          security:
            - userAuth: []
          parameters: 
            - $ref: "#/components/parameters/userId"
            - in: path
              name: followId
              required: true
              description: id of the user to follow 
              schema:
                type: string
                description: "User Id"
                example: abcdef012345
                pattern: '^[a-zA-Z0-9]+$'
                minLength: 6
                maxLength: 16
              
          responses: 
            '200':
              description: Now you follow the other user
              content:
                application/json:
                  schema:
                    type: object
                    description: "UserName of followed user"
                    properties:
                      newUserName: { $ref: "#/components/schemas/Username" }
           
            '400':
              description: Userid not found 
              content:
                application/json:
                  schema:
                    type: object
                    description: "UserId is NOT found"
                    properties:
                      newUserName: { $ref: "#/components/schemas/identifier" }                                      
            '403':
              description: Userid banned 
              content:
                application/json:
                  schema:
                    type: object
                    description: "User2 BANNED you"
                    properties:
                      newUserName: { $ref: "#/components/schemas/identifier" }
            '404':
              description: Userid2 not found
              content: 
                application/json:
                    schema:
                      type: object
                      description: "UserId2 is NOT found"
                      properties:
                        newUserName: { $ref: "#/components/schemas/identifier" }                                            
            '500':
              description: Error server execution 
              content:
                application/json:
                    schema:
                      type: object
                      description: "Not followed"
                      properties:
                        newUserName: { $ref: "#/components/schemas/Username" }      

                    
components: 
  schemas:
    Username:
      type: string
      description: "User's UserName"
      example: Franchino_12
      pattern: '^[a-zA-Z0-9-_]+$'
      minLength: 6
      maxLength: 16 
      
    identifier:
        type: string
        description: "User Id"
        example: abcdef012345
        pattern: '^[a-zA-Z0-9]+$'
        minLength: 6
        maxLength: 16    

  parameters: 
    userId:
      in: path
      name: userId
      required: true
      description: User Id
      schema:
        type: string
        description: "User Id"
        example: abcdef012345
        pattern: '^[a-zA-Z0-9]+$'
        minLength: 6
        maxLength: 16

  securitySchemes:
    userAuth:
      description: login only as your user id
      type: http
      scheme: bearer


