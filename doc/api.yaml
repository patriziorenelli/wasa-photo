
tags: 

  - name: "doLogin" 
    description: "Logs in the user" 
  - name: "setMyUserName" 
    description: "Set Username of User selected by his id " 
  - name: "followUser" 
    description: "Follow another user"   


openapi: 3.0.0 

info:  
  title: WasaPhoto 
  description:  |  
    This API allows you to manage the 
    data available in the project 
  version: 0.0.1 
servers: 
  - url: "http://localhost:3000" 

   
paths:  

  /session: 
    post: 
      tags: ["doLogin"] 
      summary: Logs in the user 
      description: |- 
        If the user does not exist, it will be created, 
        and an identifier is returned. 
        If the user exists, the user identifier is returned. 

      operationId: doLogin 
      requestBody:
        $ref: "#/components/requestBodies/userDetailsNickname"

      responses:  
        '201': 
          description: User log-in action successful 
          content: 
            application/json: 
              schema: 
                  $ref: "#/components/schemas/userId"
              example:
                userId: "abcdef012345"
                     

  /users/{userId}/username: 

    put: 
          tags: ["setMyUserName"] 
          summary: Set Username of User selected by his id  
          description: | 
            If the user does not exist, error is returned. 
            If the user exists, his username is changed. 
          operationId: setMyUserName 
          security: 
            - userAuth: [] 
          parameters:  
            - $ref: "#/components/parameters/userId" 
          requestBody:  
            $ref: "#/components/requestBodies/userDetailsNickname"

          responses:  
            '200': 
              description: UserName changed
              content: 
                application/json: 
                  schema: 
                    $ref: "#/components/schemas/errorSchema"
                  example:
                    NewUserName: "Marco12"

            '400': 
              description: Userid not found   
              

  /users/{userId}/followUser/{userId2}: 

    post: 
          tags: ["followUser"] 
          summary: Follow another user 
          description: | 
            If the user identified by userId2 does not exist, error is returned. 
            If the user identified by userId2 exists, user identified by userId follow user identified by userId2 if user2 hasn't banned him. 
          operationId: followUser 
          security: 
            - userAuth: [] 

          parameters:  
            - $ref: "#/components/parameters/userId" 
            - $ref: "#/components/parameters/userId2" 

          responses:  
            '200': 
              description: Now you follow the other user 
              content: 
                application/json: 
                  schema: 
                    $ref: '#/components/schemas/errorSchema' 
                  example:
                    userName2: "Luigi11" 
            '400': 
              description: Userid not found                                 
            '403': 
              description: Userid banned  
            '404': 
              description: Userid2 not found                                           
            '500':
              description: Error server execution                      

components:  

  schemas: 
    username: 
      type: string 
      description: "User's UserName" 
      example: Franchino_12 
      pattern: '^[a-zA-Z0-9-_]+$' 
      minLength: 6 
      maxLength: 16  

    userId:
      type: object 
      description: "User log-in action successful" 
      properties: 
        identifier: 
          $ref: '#/components/schemas/identifier'

    identifier: 
      type: string 
      description: "User Id" 
      example: abcdef012345 
      pattern: '^[a-zA-Z0-9]+$' 
      minLength: 6 
      maxLength: 16  

    errorSchema: 
      description: "Error example"
      type: object 
      properties: 
        Message: 
          $ref: "#/components/schemas/errorDescription" 

    errorDescription: 
      type: string  
      description: "Status" 
      example: Success 
      pattern: '^[a-zA-Z0-9]+$' 
      minLength: 5 
      maxLength: 50 

    schIdentifier:
      type: object
      properties:
        identifier:
          $ref: "#/components/schemas/identifier"

    scUserName:
      type: object
      description:  Describe userName 
      properties:
        username:
          $ref: "#/components/schemas/username"  

  requestBodies: 
  
    userDetailsId:
          description: User details Id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/schIdentifier"
                
    userDetailsNickname:
          description: User details Nickname
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/scUserName"


  parameters:  
    userId: 
      in: path 
      name: userId 
      required: true 
      description: User Id 
      schema: 
        type: string 
        description: "User Id" 
        example: abcdef012345 
        pattern: '^[a-zA-Z0-9]+$' 
        minLength: 6 
        maxLength: 16 

    userId2: 
      in: path 
      name: userId2 
      required: true 
      description: Second userId
      schema: 
        type: string 
        description: "Second userId" 
        example: abcdef012345 
        pattern: '^[a-zA-Z0-9]+$' 
        minLength: 6 
        maxLength: 16 

  securitySchemes: 
    userAuth: 
      description: login only as your user id 
      type: http 
      scheme: bearer 
